datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  password      String
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model Theme {
  id String @id @default(cuid())
  name String
  questions Question[]
  communities Community[]
  primary String?
  secondary String?
  accent String?
  dark Boolean?
  light Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Community {
  id String @id @default(cuid())
  themeId String
  name String
  description String
  image String
  theme Theme @relation(fields: [themeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum QuestionType {
  MULTIPLE_CHOICE
  SCALE
} 

model Question {
  id String @id @default(cuid())
  number Int @unique @default(autoincrement())
  themeId String
  question String
  type QuestionType
  options Option[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  theme Theme @relation(fields: [themeId], references: [id], onDelete: Cascade)
}

model Option {
  id String @id @default(cuid())
  questionId String
  description String
  value Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

